if, else: 	testing a condition
for: 		execute a loop a fixed number of times
while: 		execute a loop while a condition is true
repeat: 	execute an infinite loop
break: 		break the execution of a loop
next: 		skip an interation of a loop
return: 	exit a function

==================================
if, else
==================================
if(<condition>) {
 ## do something
} else {
 ## do something else
}


if(<condition1>) {
 ## do something
} else if(<condition2>) {
 ## do something different
} else {
 ## do something different
}


if(x > 3) {
 y <- 10
} else {
 y <- 0
}

y <- if(x > 3) {
 10
} else {
 0
}

=================================
for
=================================
for(i in 1:10) {
 print(i)
}

x <- c("a", "b", "c", "d")
for(i in 1:4) {
 print(x[i])
}

for(i in seq_along(x)) {
 print(x[i])
}

for(letter in x) {
 print(letter)
}

for(i in 1:4) print(x[i])

nested for loops
-----------------
x <- matrix(1:6, 2, 3)

for(i in seq_len(nrow(x))) {
 for(j in seq_len(ncol(x))) {
 print(x[i, j])
 }
}

=================================
while loops
=================================
count <- 0

while(count < 10) {
 print(count)
 count <- count + 1
}

z <- 5

while(z >= 3 && z <= 10) {
 print(z)
 coin <- rbinom(1, 1, 0.5)
 if(coin == 1) { ## random walk
 z <- z + 1
 } else {
 z <- z - 1
 }
}

=================================
repeat, break
=================================
x0 <- 1
tol <- 1e-8

repeat {
 x1 <- computeEstimate()
 if(abs(x1 - x0) < tol) {
 break
 } else {
 x0 <- x1
 }
}

================================
next
================================
for(i in 1:100) {
 if(i <= 20) {
 ## Skip the first 20 iterations
 next
 }
 ## Do something here
}

===============================
return
===============================
return signals that a function should exit and return a given value


Control structures like if, while, and for allow you to control the flow of an R program
Infinite loops should generally be avoided, even if they are theoretically correct.
Control structures mentiond here are primarily useful for writing programs; for command-line
interactive work, the *apply functions are more useful.






































